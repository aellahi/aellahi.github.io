<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://aellahi.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aellahi.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-10-20T17:02:14+00:00</updated><id>https://aellahi.github.io/feed.xml</id><title type="html">blank</title><subtitle>Aisha Ellahi&apos;s personal website. I am a biologist turned software engineer who works in the biotech industry.
</subtitle><entry><title type="html">Data Validation Simplified with Pandera</title><link href="https://aellahi.github.io/blog/2024/data-validation/" rel="alternate" type="text/html" title="Data Validation Simplified with Pandera" /><published>2024-10-13T00:00:00+00:00</published><updated>2024-10-13T00:00:00+00:00</updated><id>https://aellahi.github.io/blog/2024/data-validation</id><content type="html" xml:base="https://aellahi.github.io/blog/2024/data-validation/"><![CDATA[<p>As a software engineer working at a life sciences company, building robust data pipelines is a huge part of my job. While data hygiene itself is not the most exciting task, it is essential to all data-driven learning and decision-making. Statistical tests, machine learning models, and even gut-level inferences are only as good as the data that goes into them. As the old adage goes: garbage in, garbage out!</p>

<p>Data validation is any task that aims to ensure data conforms to the necessary assumptions required for any scientific analysis. It can mean everything from making sure metadata is formatted correctly, to checking that measurements are within three standard deviations of the mean.</p>

<p>Catching data problems early saves time and money. Training costly models on bad data can lead to drawing erroneous conclusions as well as be a waste of compute resources. And building re-usable data validation methods is especially important, as models trained and tested on a small local dataset might work great but might flop when deployed to a production environment.</p>

<p><br /><br /></p>

<h2 id="pandera-makes-data-validation-easy"><code class="language-plaintext highlighter-rouge">pandera</code> makes data validation easy</h2>

<p>As a data scientist, I often did one-off custom data validation in jupyter notebooks. While better than nothing, the problem with jupyter notebooks is that they’re messy and don’t lend themselves to re-usable code. A few years ago, however, I discovered <code class="language-plaintext highlighter-rouge">pandera</code>, and have been hooked ever since.</p>

<p><code class="language-plaintext highlighter-rouge">pandera</code> is a python package that essentially applies the concept of a <a href="https://docs.pydantic.dev/latest/">pydantic</a> <code class="language-plaintext highlighter-rouge">BaseModel</code> to a <code class="language-plaintext highlighter-rouge">pandas</code> dataframe. You can outline the desired validation framework for any dataframe you have in one convenient python class called the <a href="https://pandera.readthedocs.io/en/stable/dataframe_models.html">dataframe model</a> and use it to check your data.</p>

<p>Below are a few examples of how this simple but powerful class works. If you’d like a more interactive experience, <strong>download a copy of this Google colab notebook and follow along: <a href="https://colab.research.google.com/drive/1AerrSvtQQjblfQ9tAONYsVEmq1xNW0BX?usp=sharing">pandera examples notebook</a></strong>.</p>

<p><br /><br /></p>

<h2 id="example-1-basic-type-checking"><strong>Example 1: Basic type checking</strong></h2>

<p>Let’s say you have a dataframe that contains high-level information about a set of animals. Below is example code for creating this dataframe:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="k">def</span> <span class="nf">create_animal_df</span><span class="p">():</span>
    <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">genus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">animal_group</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">mouse</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Mus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">musculus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mammal</span><span class="sh">"</span><span class="p">])),</span>
        <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">zebrafish</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Danio</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rerio</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">fish</span><span class="sh">"</span><span class="p">])),</span>
        <span class="nf">dict</span><span class="p">(</span>
            <span class="nf">zip</span><span class="p">(</span>
                <span class="n">columns</span><span class="p">,</span>
                <span class="p">[</span><span class="sh">"</span><span class="s">fruit fly</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Drosophila</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">melanogaster</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">invertebrate</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="nf">dict</span><span class="p">(</span>
            <span class="nf">zip</span><span class="p">(</span>
                <span class="n">columns</span><span class="p">,</span>
                <span class="p">[</span><span class="sh">"</span><span class="s">sars_cov2</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">betacoronavirus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pandemicum</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">],</span>
            <span class="p">)</span>
        <span class="p">),</span>
    <span class="p">]</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">columns</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="n">animals</span> <span class="o">=</span> <span class="nf">create_animal_df</span><span class="p">()</span>

<span class="c1"># note: printing a markdown version requires the tabulate package
</span><span class="nf">print</span><span class="p">(</span><span class="n">animals</span><span class="p">.</span><span class="nf">to_markdown</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
</code></pre></div></div>

<p>Results in:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| common_name | genus           | species      | animal_group |
| :---------- | :-------------- | :----------- | :----------- |
| mouse       | Mus             | musculus     | mammal       |
| zebrafish   | Danio           | rerio        | fish         |
| fruit fly   | Drosophila      | melanogaster | invertebrate |
| sars_cov2   | betacoronavirus | pandemicum   |              |
</code></pre></div></div>

<p>Now let’s say you want to check the following:</p>

<ul>
  <li>Type check each of the column values (ie, make sure <code class="language-plaintext highlighter-rouge">common_name</code>, <code class="language-plaintext highlighter-rouge">genus</code>, <code class="language-plaintext highlighter-rouge">species</code>, etc are strings)</li>
  <li>Check that <code class="language-plaintext highlighter-rouge">common_name</code> defines the primary key of this table (meaning this column uniquely identifies a row)</li>
  <li>Check that <code class="language-plaintext highlighter-rouge">animal_group</code> is only one of seven values: mammal, fish, invertebrate, bird, reptile, amphibian, or null</li>
</ul>

<p>While you could write a function to test that each of these conditions is met, with <code class="language-plaintext highlighter-rouge">pandera</code> all you have to do is define a dataframe model as shown below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">pandera</span> <span class="k">as</span> <span class="n">pa</span>

<span class="k">class</span> <span class="nc">Animals</span><span class="p">(</span><span class="n">pa</span><span class="p">.</span><span class="n">DataFrameModel</span><span class="p">):</span>
    <span class="n">common_name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="nc">Field</span><span class="p">(</span><span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">genus</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">species</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">animal_group</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="nc">Field</span><span class="p">(</span>
        <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="nb">coerce</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">isin</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">mammal</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">fish</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">invertebrate</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bird</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">reptile</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">amphibian</span><span class="sh">"</span><span class="p">],</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>By marking <code class="language-plaintext highlighter-rouge">unique=True</code> for the <code class="language-plaintext highlighter-rouge">common_name</code> field, you’re setting it as the primary key and ensuring there are no duplicate rows in this table. And notice we set <code class="language-plaintext highlighter-rouge">nullable=True</code> for the <code class="language-plaintext highlighter-rouge">animal_group</code> column. It will allow for null values (<code class="language-plaintext highlighter-rouge">None</code>, <code class="language-plaintext highlighter-rouge">numpy.NaN</code>, <code class="language-plaintext highlighter-rouge">numpy.nan</code>, etc).</p>

<p>Validation is as easy as feeding your input data to the <code class="language-plaintext highlighter-rouge">.validate</code> method, which will either return the dataframe itself if validation passes, or throw an error if it doesn’t.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># validate, returns a validated dataframe
</span><span class="n">Animals</span><span class="p">.</span><span class="nf">validate</span><span class="p">(</span><span class="n">animals</span><span class="p">,</span> <span class="n">lazy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># or
</span><span class="nc">Animals</span><span class="p">(</span><span class="n">animals</span><span class="p">,</span> <span class="n">lazy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">lazy=True</code> parameter is handy as it will check the entire dataframe and report on all <code class="language-plaintext highlighter-rouge">SchemaErrors</code>, as opposed to failing on the first instance of an error when set to <code class="language-plaintext highlighter-rouge">False</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pandera.errors</span> <span class="kn">import</span> <span class="n">SchemaErrors</span>

<span class="k">def</span> <span class="nf">create_invalid_animal_df</span><span class="p">():</span>
    <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">genus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">animal_group</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">mouse</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Mus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">musculus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mammal</span><span class="sh">"</span><span class="p">])),</span>
        <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">zebrafish</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Danio</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rerio</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">fish</span><span class="sh">"</span><span class="p">])),</span>
        <span class="nf">dict</span><span class="p">(</span>
            <span class="nf">zip</span><span class="p">(</span>
                <span class="n">columns</span><span class="p">,</span>
                <span class="p">[</span><span class="sh">"</span><span class="s">fruit fly</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Drosophila</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">melanogaster</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">invertebrate</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="nf">dict</span><span class="p">(</span>
            <span class="nf">zip</span><span class="p">(</span>
                <span class="n">columns</span><span class="p">,</span>
                <span class="p">[</span><span class="sh">"</span><span class="s">sars_cov2</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">betacoronavirus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pandemicum</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">],</span>
            <span class="p">)</span>
        <span class="p">),</span>
         <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">mouse</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Peromyscus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">maniculatus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mammal</span><span class="sh">"</span><span class="p">])),</span>
    <span class="p">]</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">columns</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="n">invalid_df</span> <span class="o">=</span> <span class="nf">create_invalid_animal_df</span><span class="p">()</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">Animals</span><span class="p">.</span><span class="nf">validate</span><span class="p">(</span><span class="n">invalid_df</span><span class="p">,</span> <span class="n">lazy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">except</span> <span class="n">SchemaErrors</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</code></pre></div></div>

<p>yields:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="sh">"</span><span class="s">DATA</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">SERIES_CONTAINS_DUPLICATES</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">schema</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Animals</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">column</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">check</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">field_uniqueness</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">series </span><span class="sh">'</span><span class="s">common_name</span><span class="sh">'</span><span class="s"> contains duplicate values:0    mouse4    mouseName: common_name, dtype: object</span><span class="sh">"</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Having been in many situations where you know there’s a problem but don’t know <em>where</em> in the dataframe the offending value is, this report is amazing! It tells you exactly what check has failed and which column has the offending value. If you set <code class="language-plaintext highlighter-rouge">lazy=False</code> and check for a <code class="language-plaintext highlighter-rouge">SchemaError</code> instead, it will even tell you which index/row of the dataframe is breaking the check.</p>

<p><br /><br /></p>

<h2 id="example-2-inheritance-and-dataframe-level-checks"><strong>Example 2: Inheritance and Dataframe-level checks</strong></h2>

<p>It’s easy enough to explicitly define whether the values in a column should be strings, floats, or boolean. But sometimes you want to perform context-specific, dataframe-wide checks. Some examples include checking a 1:many mapping between two columns, or making sure the values of a column conform to a normal distribution.</p>

<p><code class="language-plaintext highlighter-rouge">pandera</code> accommodates these use cases via dataframe-wide validation methods that are marked with the <code class="language-plaintext highlighter-rouge">@pa.dataframe_check</code> decorator. This syntax dramatically improves readability and condenses many lines of checking code into one python object.</p>

<p>To extend the previous example, let’s say that you perform field research by measuring the weight in grams of real life “samples” of each animal (let’s ignore the virus example for now, though I was intrigued to learn that there have been efforts <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7685332/">to quantify the weight of total SARS-CoV-2 viruses</a> in people with COVID-19). You do this by taking three measurements for each animal. After weeks of data collection, you want to check that your measurements are in triplicate.</p>

<p>Not only can you leverage your previously-outlined <code class="language-plaintext highlighter-rouge">Animals</code> datamodel for this new dataframe via inheritance, but you can add a new dataframe-wide level check to make sure there are exactly three measurements for each animal:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">pandera</span> <span class="k">as</span> <span class="n">pa</span>
<span class="kn">from</span> <span class="n">pandera.typing</span> <span class="kn">import</span> <span class="n">Index</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">,</span> <span class="n">Series</span>

<span class="k">def</span> <span class="nf">create_animal_data</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Abbreviatd dataframe showing three samples of mouse weight measurements.</span><span class="sh">"""</span>
    <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span>
        <span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">genus</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">animal_group</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">sample_id</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">weight_g</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">]</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">mouse</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Mus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">musculus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mammal</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">103.2</span><span class="sh">"</span><span class="p">])),</span>
        <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">mouse</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Mus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">musculus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mammal</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">101.9</span><span class="sh">"</span><span class="p">])),</span>
        <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">mouse</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Mus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">musculus</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mammal</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">110.7</span><span class="sh">"</span><span class="p">])),</span>
    <span class="p">]</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">columns</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>


<span class="k">class</span> <span class="nc">AnimalSamples</span><span class="p">(</span><span class="n">Animals</span><span class="p">):</span>
    <span class="n">common_name</span><span class="p">:</span> <span class="p">(</span>
        <span class="nb">str</span>  <span class="c1"># redefine this without the unique=True as it is no longer the primary key
</span>    <span class="p">)</span>
    <span class="n">sample_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="nc">Field</span><span class="p">(</span><span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># this is the new primary key
</span>    <span class="n">weight_g</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="nc">Field</span><span class="p">(</span><span class="nb">coerce</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="nd">@pa.dataframe_check</span>
    <span class="k">def</span> <span class="nf">check_triplicate</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">df</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Check that there are exactly three sample_ids for each animal.</span><span class="sh">"""</span>
        <span class="nf">return </span><span class="p">(</span>
            <span class="n">df</span><span class="p">[[</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sample_id</span><span class="sh">"</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">).</span><span class="nf">count</span><span class="p">().</span><span class="nf">eq</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">all</span><span class="p">()</span>
        <span class="p">)</span>


<span class="c1"># create dataframe
</span><span class="n">animal_samples_df</span> <span class="o">=</span> <span class="nf">create_animal_data</span><span class="p">()</span>

<span class="c1"># validate
</span><span class="nc">AnimalSamples</span><span class="p">(</span><span class="n">animal_samples_df</span><span class="p">,</span> <span class="n">lazy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>Notice too that the <code class="language-plaintext highlighter-rouge">weight_g</code> were passed in as strings, but the <code class="language-plaintext highlighter-rouge">coerce=True</code> argument converted the values to floats.</p>

<p><br /><br /></p>

<h2 id="example-3-data-pre-processing-with-custom-parsers"><strong>Example 3: Data pre-processing with custom parsers</strong></h2>

<p>Another fun feature of dataframe models is being able to define custom <a href="https://pandera.readthedocs.io/en/stable/parsers.html">data processing methods</a> using the <code class="language-plaintext highlighter-rouge">@pa.dataframe_parser</code> decorator (column-level parsing methods can also be defined). The example below shows how z-score calculation can be done for all the measurements grouped by <code class="language-plaintext highlighter-rouge">common_name</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span>
<span class="kn">from</span> <span class="n">pandera.typing</span> <span class="kn">import</span> <span class="n">Series</span>

<span class="k">class</span> <span class="nc">AnimalSamples</span><span class="p">(</span><span class="n">Animals</span><span class="p">):</span>
    <span class="n">common_name</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># redefine this without the unique=True
</span>    <span class="n">sample_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="nc">Field</span><span class="p">(</span><span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># this is the new primary key
</span>    <span class="n">weight_g</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="nc">Field</span><span class="p">(</span><span class="nb">coerce</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="nd">@pa.dataframe_parser</span>
    <span class="k">def</span> <span class="nf">z_score</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">df</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="n">mean</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">df</span><span class="p">[[</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">weight_g</span><span class="sh">"</span><span class="p">]]</span>
            <span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">mean</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">weight_g</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">mean</span><span class="sh">"</span><span class="p">})</span>
            <span class="p">.</span><span class="nf">to_dict</span><span class="p">(</span><span class="n">orient</span><span class="o">=</span><span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">std</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">df</span><span class="p">[[</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">weight_g</span><span class="sh">"</span><span class="p">]]</span>
            <span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">"</span><span class="s">common_name</span><span class="sh">"</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">agg</span><span class="p">(</span><span class="sh">"</span><span class="s">std</span><span class="sh">"</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">weight_g</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">std</span><span class="sh">"</span><span class="p">})</span>
            <span class="p">.</span><span class="nf">to_dict</span><span class="p">(</span><span class="n">orient</span><span class="o">=</span><span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">z_score</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">weight_g</span> <span class="o">-</span> <span class="n">mean</span><span class="p">[</span><span class="n">row</span><span class="p">.</span><span class="n">common_name</span><span class="p">][</span><span class="sh">"</span><span class="s">mean</span><span class="sh">"</span><span class="p">])</span> <span class="o">/</span> <span class="n">std</span><span class="p">[</span><span class="n">row</span><span class="p">.</span><span class="n">common_name</span><span class="p">][</span><span class="sh">"</span><span class="s">std</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="nf">itertuples</span><span class="p">()</span>
        <span class="p">]</span>
        <span class="k">return</span> <span class="n">df</span>

<span class="n">processed_data</span> <span class="o">=</span> <span class="nc">AnimalSamples</span><span class="p">(</span><span class="n">animal_samples_df</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">processed_data</span><span class="p">.</span><span class="nf">to_markdown</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
</code></pre></div></div>

<p>yields:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| common_name   | genus   | species   | animal_group   | sample_id   |   weight_g |   z_score |
|:--------------|:--------|:----------|:---------------|:------------|-----------:|----------:|
| mouse         | Mus     | musculus  | mammal         | A           |      103.2 | -0.43508  |
| mouse         | Mus     | musculus  | mammal         | B           |      101.9 | -0.708759 |
| mouse         | Mus     | musculus  | mammal         | C           |      110.7 |  1.14384  |
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="closing-thoughts">Closing Thoughts</h2>

<p>These three examples cover the vast majority of data validation use cases that I’ve encountered, but in case you’re curious to learn more, definitely check out the <code class="language-plaintext highlighter-rouge">pandera</code> <a href="https://pandera.readthedocs.io/en/stable/index.html#">docs</a> or play around with the Colab <a href="https://colab.research.google.com/drive/1AerrSvtQQjblfQ9tAONYsVEmq1xNW0BX?usp=sharing">notebook</a> with your own data. While some validation needs are near universal (e.g. type checking), there are many others that are context dependent, and fortunately <code class="language-plaintext highlighter-rouge">pandera</code> offers flexibility to accommodate them. Even type checking array fields, while not straightforward, can be accomplished by <code class="language-plaintext highlighter-rouge">Check</code> <a href="https://pandera.readthedocs.io/en/stable/checks.html">objects</a> or <code class="language-plaintext highlighter-rouge">dataframe_check</code> methods. The package offers support for other tabular data formats as well (such as <code class="language-plaintext highlighter-rouge">pyspark</code> and <code class="language-plaintext highlighter-rouge">dask</code> dataframes), though <code class="language-plaintext highlighter-rouge">pandas</code> has the most support by far.</p>

<p>Good luck and may your data wrangling be quick and painless!</p>]]></content><author><name></name></author><category term="software" /><summary type="html"><![CDATA[Example code highlighting the use of pandera's models for data validation]]></summary></entry><entry><title type="html">Eight Features of Software Development at a Biotech Start-up</title><link href="https://aellahi.github.io/blog/2024/software-in-biotech/" rel="alternate" type="text/html" title="Eight Features of Software Development at a Biotech Start-up" /><published>2024-09-18T00:00:00+00:00</published><updated>2024-09-18T00:00:00+00:00</updated><id>https://aellahi.github.io/blog/2024/software-in-biotech</id><content type="html" xml:base="https://aellahi.github.io/blog/2024/software-in-biotech/"><![CDATA[<p>When I finished graduate school in 2016 as a molecular biologist, I knew I wanted to work at the intersection of biology, data science, and software. The field of genomics was exploding then, which brought with it the capability to capture thousands to millions of measurements per cell. All that data promised a more complete picture of biology, but it also necessitated new methods to generate, transform, and interpret said data. You can’t exactly read genome sequences in Excel (though folks have tried), and the sheer quantity of measurements renders experiments practically uninterpretable without statistics and modeling.</p>

<p>Eight years later, we are at the beginning of another exciting era—one fueled by machine learning and large language models. This renewed spotlight on tech and bio will likely attract software developers from outside the field of biology who may be curious about what working at an early to mid-stage biotech company is like. It is with this audience in mind that I decided to write this post.</p>

<p>Let’s start with a basic question:</p>

<h3>What is the goal of software at a biotech start-up?</h3>

<p>This question might sound too elementary—kind of like asking what water is to a fish. But let’s attempt an answer, because I believe it will highlight both the requirements as well as the challenges of building software products for science.</p>

<p>The goal of all software is to automate tedious, repetitive tasks and to perform them at scale and without error. That’s it. One can certainly add some color to this definition: the goal of software is to <em>cleanly and elegantly</em> automate tasks, or to <em>function seamlessly</em> whether there are 10 or 10,000 people using it. But these qualifiers are just decorators of the essential truth that we use software to do things faster and with fewer mistakes than we ourselves can.</p>

<p>Early-stage biotech companies, like all biotech companies, are in the business of creating and selling a biologically-derived product, whether that’s a therapeutic drug, sustainably sourced squalane (a component of skin moisturizers), or a genetically engineered crop that is robust to climate change. Biotechs differ from most other companies in that their products require a long development time (many years, if not decades). These companies are often founded on the hint of a promising research finding, but the real work is turning that discovery into a product you can manufacture at scale and that will work as desired in a human body or other intended environment.</p>

<p>This period of transforming a promising scientific nugget to a commercial product is essentially a long phase of research and development. Early-stage biotechs are still conducting novel research, so software in such a context serves the goal of enabling quick iterations of experimental learning and discovery. As a software developer, your product <em>is the scientific process itself.</em> All of your products in some way must further the goal of quick and repeatable execution of lab experiments at scale. Everything from developing lab automation software, to deploying machine learning models, to establishing a robust data pipeline that can reliably capture instrument data and calculate key metrics falls under such a goal.</p>

<p>This also means the way software is engineered at a biotech has some quirks:</p>

<ol>
    <li>
        <h5>At most biotech companies, you’re not making a single widget; you’re making a dozen different widgets.</h5>
        <p>You’re not making one strain but ten thousand strains. You’re not helping scientists run just one kind of experiment but often half a dozen (or more!) kinds of experiments, each of which come from a different source, have their own format of metadata, and their own sample tracking.</p>
    </li>
    <li>
        <h5>The widgets you create (front-end tools, data pipelines, dashboards, etc) will be constantly evolving.</h5>
        <p>Constant change is a feature of all start-ups, but coupled with fact #1 above, staying on top of things as a developer can be extra challenging. Practically, this means you often don’t even have time for a design doc for a new software product or feature. By the time you’ve made one, the research team needed the feature yesterday, has hacked together something that works well enough, has used it to meet some objective, and has already moved onto a different research question. This can be both disorienting but also exciting.</p>
    </li>
    <li>
        <h5>Delivering a simple MVP (”minimum viable product”) that is a little buggy is better than delivering a tool that has no flaws.</h5>
        <p>Rapidly prototyping or delivering a simple MVP (”minimum viable product”) is infinitely more valuable than architecting a flawless tool, or even a tool that can do many things but is difficult to update. This is especially so in a world where the requirements for research themselves are changing (see point #2). Designing software like this is more of an art than a science, and I believe gets easier with experience, as you learn which components of a tool can be modular and which must be tailored to a specific purpose.</p>
    </li>
    <li>
        <h5>Communication with your stakeholders/users must be constant and fast.</h5>
        <p>You can’t always assume you know how a lab scientist will want a feature to be implemented, or which metrics a data scientist will want to capture from model. Communicate, communicate, communicate. Wet lab scientists, data scientists, and computational biologists are the scientific experts guiding the development of the biological product that a biotech one day hopes to sell, and unless you did your PhD in the thing they are developing, you probably don’t know exactly what they want and how they want it.</p>
    </li>
    <li>
        <h5>Beautiful, clear, easy-to-understand code will often take a back seat to code that is quickly implemented.</h5>
        <p>While this is not always true and heavily depends on the developers' experience level and tolerance for brittleness, I have yet to win an argument for slowing down the practice of force pushing `dev` branches to `main` using an appeal to readability and elegance alone. This characteristic about developing at biotech startups is the hardest one for me to stomach, because while some folks disagree, I believe readable code is worth prioritizing (more on that in another blog post!)</p>
    </li>
    <li>
        <h5>There is <b>a LOT LESS</b> formality about how software gets done at a biotech.</h5>
        <p>A lack of clarity on design and product requirements, as well as a fast and loose development process—scant code reviews, deploying code from dev branches on a time crunch, for example—are endemic. While sprint planning, JIRA tickets, and design docs are regular features of software development at more mature companies, they are not ubiquitous at biotech startups, which can be both good and bad, depending on the team’s objectives.</p>
    </li>
    <li>
        <h5>Your users are never (if rarely) external to the company</h5>
        <p>They generally consist of lab scientists, data scientists/computational biologists, and any other stakeholders interested in running experiments and evaluating the results of those experiments to inform the next product development cycle. And because you're not launching an external-facing product (in most cases), there is less pressure to make tools that execute flawlessly. If something breaks, you won’t have to worry about 1000s of users writing in to complain.</p>
    </li>
    <li>
        <h5>You have to be prepared to kill your (software) darlings.</h5>
        <p>The company's needs can change fast, and as a result, a product that was necessary six months ago
        may become obsolete six months later. Entire codebases can become defunct, and it might seem like all those hours you put into writing and debugging that code were a waste. I like to take a more positive spin, and think of this culling force akin to the force of natural selection on a population (where the population happens to be your software output). If you get attached to what you write, this will be hard to accept. If you can learn to roll with it, however, it's a fun way to learn new things and have impact in ever more novel ways.</p>
    </li>
    
</ol>

<p>These eight features make for a dynamic and intellectually challenging environment. You’ll learn about technology processes most people have never heard of, all in the context of a mission that feels impactful. Feel free to message me if you have more questions or want advice about a particular problem you’re facing; it might become the subject of my next post!</p>]]></content><author><name></name></author><category term="software" /><summary type="html"><![CDATA[Observations from the last eight years of working at the intersection of biology, data science, and software]]></summary></entry><entry><title type="html">Beyond the t-test</title><link href="https://aellahi.github.io/blog/2022/beyond-the-t-test/" rel="alternate" type="text/html" title="Beyond the t-test" /><published>2022-06-22T00:00:00+00:00</published><updated>2022-06-22T00:00:00+00:00</updated><id>https://aellahi.github.io/blog/2022/beyond-the-t-test</id><content type="html" xml:base="https://aellahi.github.io/blog/2022/beyond-the-t-test/"><![CDATA[<p>This is a test. <a href="https://www.pinterest.com">Pinterest</a></p>

<h4 id="hipster-list">Hipster list</h4>

<ul>
    <li>brunch</li>
    <li>fixie</li>
    <li>raybans</li>
    <li>messenger bag</li>
</ul>

<p>Hoodie Thundercats retro, tote bag 8-bit Godard craft beer gastropub. Truffaut Tumblr taxidermy, raw denim Kickstarter sartorial dreamcatcher. Quinoa chambray slow-carb salvia readymade, bicycle rights 90’s yr typewriter selfies letterpress cardigan vegan.</p>

<hr />

<p>Pug heirloom High Life vinyl swag, single-origin coffee four dollar toast taxidermy reprehenderit fap distillery master cleanse locavore. Est anim sapiente leggings Brooklyn ea. Thundercats locavore excepteur veniam eiusmod. Raw denim Truffaut Schlitz, migas sapiente Portland VHS twee Bushwick Marfa typewriter retro id keytar.</p>

<blockquote>
    We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another.
    —Anais Nin
</blockquote>

<p>This is not showing up why?</p>]]></content><author><name></name></author><category term="technical-writing" /><category term="datascience" /><summary type="html"><![CDATA[Using Bayesian modeling to separate signal from noise]]></summary></entry></feed>